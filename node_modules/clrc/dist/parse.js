"use strict";
exports.__esModule = true;
var constants_1 = require("./constants");
/**
 * allow multiple time tag
 * [time][time]content
 */
var LYRIC_LINE = /^((?:\[\d+:\d+(?:\.\d+)?\])+)(.*)$/;
var METADATA_LINE = /^\[(.+?):(.*?)\]$/; // [key:value]
var LYRIC_TIME = /^(\d+):(\d+)(?:\.(\d+))?$/; // 00:00.00 or 00:00
var SPACE_START = /^\s+/;
var SPACE_END = /\s+$/;
/**
 * parse lrc string
 * @author mebtte<hi@mebtte.com>
 */
function parse(lrc, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.sortByStartTime, sortByStartTime = _c === void 0 ? constants_1.DEFAULT_OPTIONS.sortByStartTime : _c, _d = _b.trimStart, trimStart = _d === void 0 ? constants_1.DEFAULT_OPTIONS.trimStart : _d, _e = _b.trimEnd, trimEnd = _e === void 0 ? constants_1.DEFAULT_OPTIONS.trimEnd : _e;
    var metadatas = [];
    // @ts-ignore
    var metadata = {};
    var lyrics = [];
    var invalidLines = [];
    var lines = lrc.split('\n');
    for (var i = 0, length = lines.length; i < length; i += 1) {
        var raw = lines[i];
        var line = raw;
        if (trimStart) {
            line = line.replace(SPACE_START, '');
        }
        if (trimEnd) {
            line = line.replace(SPACE_END, '');
        }
        /** lyric */
        var lyricMatch = line.match(LYRIC_LINE);
        if (lyricMatch) {
            var timesPart = lyricMatch[1]; // [time][time]content --> [time][time]
            var times = timesPart.split(']['); // [time1][time2] --> [time1 | time2]
            for (var _i = 0, times_1 = times; _i < times_1.length; _i++) {
                var time = times_1[_i];
                var timeMatch = time.replace(/(\[|\])/g, '').match(LYRIC_TIME);
                var minute = timeMatch[1];
                var second = timeMatch[2];
                var centisecond = timeMatch[3] || '00'; // compatible with [00:00]
                var centisecondNumber = centisecond.length === 3 ? +centisecond : +centisecond * 10; // // compatible with [00:00.000]
                lyrics.push({
                    lineNumber: i,
                    startMillisecond: +minute * 60 * 1000 + +second * 1000 + centisecondNumber,
                    content: lyricMatch[2],
                    raw: raw
                });
            }
            continue;
        }
        /** metadata */
        var metadataMatch = line.match(METADATA_LINE);
        if (metadataMatch) {
            var key = metadataMatch[1];
            var value = metadataMatch[2];
            metadatas.push({
                lineNumber: i,
                key: key,
                value: value,
                raw: raw
            });
            // @ts-ignore
            metadata[key] = value;
            continue;
        }
        /** invalid line */
        invalidLines.push({
            lineNumber: i,
            raw: raw
        });
    }
    if (sortByStartTime) {
        lyrics = lyrics.sort(function (a, b) { return a.startMillisecond - b.startMillisecond; });
    }
    return {
        metadatas: metadatas,
        metadata: metadata,
        lyrics: lyrics,
        invalidLines: invalidLines
    };
}
exports["default"] = parse;
